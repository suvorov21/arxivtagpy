stages:
  - build
  - test
  - deploy

include:
  - template: Code-Quality.gitlab-ci.yml

build_assets:
  stage: build
  image:
    alpine:latest
  before_script:
    - apk add python3-dev
    - apk add postgresql postgresql-dev
    - apk add py3-wheel py3-pip
    - apk add gcc musl-dev libffi-dev make g++
    - python3 -m pip install --ignore-installed -r requirements_tests.txt
    - apk add nodejs npm
    - npm install -g less
  script:
    - export BUILD_ASSETS=True
    - flask assets build
  artifacts:
    paths:
      - app/static/dist/css/*.css
      - app/static/dist/js/*.js
    expire_in: 1 week


code_quality:
  stage: test
  artifacts:
    paths: [gl-code-quality-report.json]

syntax_test:
  stage: test
  image:
    alpine:latest
  before_script:
    - apk add python3-dev
    - apk add postgresql postgresql-dev
    - apk add py3-wheel py3-pip
    - apk add gcc musl-dev libffi-dev make g++
    - python3 -m pip install --ignore-installed -r requirements_tests.txt
  script:
    - python3 -m py_compile app/*.py

integration_test:
  stage: test
  image:
    alpine:latest
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: arxiv_test
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: tester
    POSTGRES_HOST_AUTH_METHOD: trust
  before_script:
    - apk add python3-dev
    - apk add postgresql postgresql-dev
    - apk add py3-wheel py3-pip
    - apk add gcc musl-dev libffi-dev make g++
    - python3 -m pip install --ignore-installed -r requirements_tests.txt
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - export TOKEN="test_token"
    - export BUILD_ASSETS=True
    - apk add chromium chromium-chromedriver
    - apk add nodejs npm
    - npm install -g less
  script:
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
    - pytest --cov=app test/
    - coverage xml -o coverage.xml
    - wget https://coverage.codacy.com/get.sh
    - . get.sh report -r coverage.xml
  artifacts:
    reports:
      cobertura: coverage.xml

stage_to_beta:
  stage: deploy
  tags:
    - deploy
  environment:
    name: staging
    url: https://beta.arxivtag.tk/
  script:
    - cd "$CD_STAGE_PATH"
    - source update.sh
  only:
    - develop

prod:
  type: deploy
  stage: deploy
  tags:
    - deploy
  environment:
    name: production
    url: https://arxivtag.tk/
  script:
    - cd "$CD_PROD_PATH"
    - source update.sh
  only:
    - master

# stage_to_beta:
#   stage: stage
#   image:
#     alpine:latest
#   before_script:
#     - apk add lftp
#   script:
#     - lftp -e "set ssl:verify-certificate no; open $FTP_HOST; user $FTP_NAME $FTP_PASS; mirror -X .* -X .*/ -X __pycache__/* -X *.wsgi -X wsgi.py -X .env -X *.json --reverse --verbose --delete /builds/suvorov21/arxivtagpy/ public_html/beta/flask/; bye"
#   only:
#     - develop

# production_ftp:
#   type: deploy
#   stage: production
#   image:
#     alpine:latest
#   before_script:
#     - apk add lftp
#   script:
#     - lftp -e "set ssl:verify-certificate no; open $FTP_HOST; user $FTP_NAME $FTP_PASS; mirror -X .* -X .*/ -X __pycache__/* -X *.wsgi -X wsgi.py -X .env -X *.json -X *.log --reverse --verbose --delete /builds/suvorov21/arxivtagpy/ public_html/prod/flask/; bye"
#   only:
#     - master

# HEROKU PRODUCTION
# production_heroku:
#     type: deploy
#     stage: production
#     before_script:
#       - apt-get update -qy
#       - apt-get install -y ruby-dev
#       - gem install dpl
#     script:
#         - dpl --provider=heroku --skip_cleanup --app=$ARXIVTAG_PRODUCTION --api-key=$HEROKU_API_KEY
#     only:
#         - master
