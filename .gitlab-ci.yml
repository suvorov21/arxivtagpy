stages:
  - test
  - production

syntax_test:
  stage: test
  image:
    alpine:latest
  before_script:
    - apk add python3-dev
    - apk add postgresql postgresql-dev
    - apk add py3-wheel py3-pip
    - apk add gcc musl-dev libffi-dev make g++
    - python3 -m pip install --ignore-installed -r requirements.txt
  script:
    - python3 -m py_compile app/*.py

integration_test:
  stage: test
  image:
    alpine:latest
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: arxiv_test
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: tester
    POSTGRES_HOST_AUTH_METHOD: trust
  before_script:
    - apk add python3-dev
    - apk add postgresql postgresql-dev
    - apk add py3-wheel py3-pip
    - apk add gcc musl-dev libffi-dev make g++
    - python3 -m pip install --ignore-installed -r requirements.txt
    - export PGPASSWORD=$POSTGRES_PASSWORD
  script:
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
    - pytest

production:
  type: deploy
  stage: production
  image:
    alpine:latest
  before_script:
    - apk add lftp
    - sed -i "s/DB_ADRESS/$PROD_DB/g" configmodule.py
  script:
    - lftp -e "set ssl:verify-certificate no; open $FTP_HOST; user $FTP_NAME $FTP_PASS; mirror -X .* -X .*/ -X __pycache__/* -X *.wsgi -X wsgi.py --reverse --verbose --delete /builds/suvorov21/arxivtagpy/ public_html/prod/flask/; bye"
  only:
    - master
    - develop


# OLD HEROKU PRODUCTION
# production:
#     type: deploy
#     stage: production
#     before_script:
#       - apt-get update -qy
#       - apt-get install -y ruby-dev
#       - gem install dpl
#     script:
#         - dpl --provider=heroku --app=$ARXIVTAG_PRODUCTION --api-key=$HEROKU_API_KEY
#     only:
#         - master
