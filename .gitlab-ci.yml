stages:
  - build
  - test
  - sonar
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml

sast:
  stage: test

syntax_test:
  stage: build
  image:
    python:3.10.12-slim-buster
  before_script:
    - python3 -m pip install --ignore-installed -r requirements.txt
  script:
    - python3 -m py_compile app/*.py

assets_build:
    stage: build
    image: node:16.9.0-alpine3.14
    before_script:
      - cd app/frontend/src/
      - npm install
    script:
        - npm run build
    artifacts:
      paths:
        - app/frontend/dist/js/*

integration_test:
  stage: test
  tags:
    - custom_runner
  image:
    python:3.10.12-slim-buster
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: arxiv_test
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: tester
    POSTGRES_HOST_AUTH_METHOD: trust
  before_script:
    - python3 -m pip install --ignore-installed -r requirements.txt
    - apt-get update
    - apt-get install -y chromium chromium-driver wget
    - mv .env_example .env
    - sed -i '/log_cli_level = 10/d' test/pytest.ini
    - sed -i '/log_cli = true/d' test/pytest.ini
  script:
    - pytest --cov=app --junitxml=report.xml test
    - coverage xml -o coverage.xml
    - wget https://coverage.codacy.com/get.sh
    - . get.sh report -r coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    paths:
      - coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml


variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
sonarcloud-check:
  stage: sonar
  needs:
    - job: integration_test
      artifacts: true
  tags:
    - custom_runner
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - master
    - develop

stage_to_beta:
  stage: deploy
  tags:
    - deploy
  environment:
    name: staging
    url: https://beta.arxivtag.com/
  script:
    - cd "$CD_STAGE_PATH"
    - source update.sh
  only:
    - develop

prod:
  stage: deploy
  tags:
    - deploy
  environment:
    name: production
    url: https://arxivtag.com/
  script:
    - cd "$CD_PROD_PATH"
    - source update.sh
  only:
    - master
